@page "/admin/collections/edit/{id:int}"
@page "/admin/collections/create"
@using LampStore.Models.CollectionsLights
@using LampStore.Models.MetaTags
@inherits OwningComponentBase<ICollectionLight>
@inject IPopupNotification PopupNotification
@inject IFolderManager FolderManager
@inject IMetaManager MetaManager

<div class="admin-notification__wrapper">
	<Popup ListNotifications="PopupNotification.ListNotifications" />
</div>


<Confirmation @ref="confirmation" OnCancel="OnCancel" OnConfirm="OnConfirm" IsConfirm="confirmationCheckOnDelete"
	Title=@confirmationTitle>
	<div class="toast-body">
		@if (confirmationCheckOnDelete)
		{
			<p>Удалить дополнительный блок @AdditionalBlockToBeDelete?.Caption?</p>
		}
		else 
		{
			<EditForm Model="AdditionalBlock" OnValidSubmit="CreateAdditionalBlockAsync" id="editAdditionalBlock">
			<DataAnnotationsValidator />
			<div class="row">
				<div class="col">
					<div class="form-group mb-4">
						<label>ID дополнительного блока</label>
						<input class="form-control" disabled value="@AdditionalBlock.Id" />
					</div>
					<div class="form-group mb-4">
						<label>ID записей для связи</label>
						<input class="form-control" disabled value="@AdditionalBlock.CollectionLightId" />
					</div>
					<div class="form-group mb-4">
						<label>Заголовок блока</label>
						<ValidationMessage For="@(() => AdditionalBlock.Caption)" />
						<InputText class="form-control" @bind-Value="AdditionalBlock.Caption" />
					</div>
					@if (TabIsActive)
					{
						<div class="form-group mb-4">
							<img class="img-fluid" style="height: 250px;" src="@AdditionalBlock.Url" alt="">
							<label>Изображение</label>
							<ImgManagerControl @bind-ChildName="AdditionalBlock.Url" PathFolder="@UrlPath"
								FolderName="@CollectionPage.Id.ToString()" IsSlider="false" />
						</div>
					}
					else
					{
						<div class="form-group mb-4">
							<label>Изображение можно загзуить после сохрания записи</label>
						</div>
					}
					<div class="form-group mb-4">
						<label>Содержимое</label>
						<ValidationMessage For="@(() => AdditionalBlock.Description)" />
						<InputTextArea class="form-control" @bind-Value="AdditionalBlock.Description" />
					</div>
						<div class="form-group">
							<label>Тип поля</label>
							<InputSelect class="form-select" @bind-Value="AdditionalBlock.AdditionalBlockType">
								<option value="">Выберите тип поля для вывода</option>
								@foreach (var type in Enum.GetValues<AdditionalBlockType>())
								{
									<option value="@type">@type.GetDisplayName()</option>
								}
							</InputSelect>
						</div>
						<div class="form-group mb-4">
							<label>Опубликовано</label>
							<InputCheckbox class="" @bind-Value="AdditionalBlock.IsAvailable" />
						</div>
						<div class="mt-2">
							<button form="editAdditionalBlock" type="submit" class="btn btn-warning">Сохранить</button>
						</div>
				</div>
			</div>
			</EditForm>
		}
	</div>
</Confirmation>

<h3 class="bg-@ThemeColor text-white text-center p-1">@TitleText коллекции товаров</h3>
<TabControl>
	<TabPage Text="Коллекция" IsActive="true">
	<h1 class="">Свойства</h1>
	<EditForm Model="CollectionPage" OnValidSubmit="SaveCollectionPage" id="creatCooperationPageForm">
		<DataAnnotationsValidator />
		<div class="row row-cols-2">
			<div class="col">
				@if (CollectionPage!.Id != 0)
				{
					<div class="form-group mb-4">
						<label>ID</label>
						<input class="form-control" disabled value="@CollectionPage.Id" />
					</div>
				}
				<div class="form-group mb-4">
					<label>Title</label>
					<InputText class="form-control" @bind-Value="MetaData.Title" />
				</div>
				<div class="form-group mb-4">
					<label>Description</label>
					<InputText class="form-control" @bind-Value="MetaData.Description" />
				</div>	
				<div class="form-group mb-4">
					<label>Url для старницы</label>
					<InputText class="form-control" @bind-Value="MetaData.Url" />
				</div>
				<div class="form-group mb-4">
					<label>Заголовок</label>
					<ValidationMessage For="@(() => CollectionPage.Name)" />
					<InputText class="form-control" @bind-Value="CollectionPage.Name" />
				</div>
				<div class="form-group mb-4">
					<label>Описание для привью</label>
					<ValidationMessage For="@(() => CollectionPage.Description)" />
					<InputTextArea class="form-control" @bind-Value="CollectionPage.Description" />
				</div>
				<div class="form-group mb-4">
					<label>Опубликовано</label>
					<InputCheckbox class="" @bind-Value="CollectionPage.IsAvailable" />
				</div>
				<div class="form-group mb-4">
					<label>Показывать на главной</label>
					<InputCheckbox class="" @bind-Value="CollectionPage.IsHomePage" />
				</div>
			</div>
			<div class="col">
			@if (TabIsActive)
			{
				<div class="form-group mb-4">
					<img class="img-fluid" style="height: 250px;" src="@CollectionPage.Img" alt="">
					<label>Изображение</label>
					<ImgManagerControl @bind-ChildName="CollectionPage.Img" PathFolder="@UrlPath"
						FolderName="@CollectionPage.Id.ToString()" IsSlider="false" />
				</div>
			}
			else
			{
				<div class="form-group mb-4">
					<label>Изображение можно загзуить после сохрания записи</label>
				</div>
			}
			</div>
		</div>
	</EditForm>
	<div class="mt-2">
		<button form="creatCooperationPageForm" type="submit" class="btn btn-@ThemeColor">Сохранить</button>
		<NavLink class="btn btn-secondary" href="/admin/collections">Отмена</NavLink>
	</div>
	</TabPage>
	<TabPage Text="Дополнительные блоки" IsActive="@true">
		<table class="table table-sm table-striped table-bordered">
			<thead>
				<tr>
					<th>ID</th>
					<th>Заголовок блока</th>
					<th>Изображение</th>
					<th>Содержимое</th>
					<th>Тип поля</th>
					<th>Опубликован</th>
					<td />
				</tr>
			</thead>
			<tbody>
				@if(AdditionalBlocksForCollectionData is not null)
				{
					@foreach (AdditionalBlocksForCollection item in AdditionalBlocksForCollectionData)
					{
						<tr>
							<td>@item.Id</td>
							<td>@item.Caption</td>
							<td><img class="img-fluid" style="height: 80px;" src="@item.Url" alt=""></td>
							<td>@item.Description</td>
							<td>@item.AdditionalBlockType.GetDisplayName()</td>
							<td>@item.IsAvailable</td>
							<td class="text-center">
								<button class="btn btn-info btn-sm" @onclick="@(() => ChangeAdditionalBlock(item))">Изменить</button>
								<button class="btn btn-danger btn-sm" @onclick="@(() => DeleteAdditionalBlock(item))">Удалить</button>
							</td>
						</tr>
					}
				}
			</tbody>
		</table>	
	</TabPage>
	<TabPage Text="Добавить дополнительный блок" IsActive="@TabIsActive">
		<EditForm Model="AdditionalBlock" OnValidSubmit="CreateAdditionalBlockAsync" id="createAdditionalBlock">
			<DataAnnotationsValidator />
			<div class="row row-cols-2">
				<div class="col">
						<div class="form-group mb-4">
							<label>ID дополнительного блока</label>
							<input class="form-control" disabled value="@AdditionalBlock.Id" />
						</div>
						<div class="form-group mb-4">
						<label>ID записей для связи</label>
							<input class="form-control" disabled value="@AdditionalBlock.CollectionLightId" />
						</div>
					<div class="form-group mb-4">
						<label>Заголовок блока</label>
						<ValidationMessage For="@(() => AdditionalBlock.Caption)" />
						<InputText class="form-control" @bind-Value="AdditionalBlock.Caption" />
					</div>
					@if (TabIsActive)
					{
						<div class="form-group mb-4">
							<img class="img-fluid" style="height: 250px;" src="@AdditionalBlock.Url" alt="">
							<label>Изображение</label>
							<ImgManagerControl @bind-ChildName="AdditionalBlock.Url" PathFolder="@UrlPath"
								FolderName="@CollectionPage.Id.ToString()" IsSlider="false" />
						</div>
					}
					else
					{
						<div class="form-group mb-4">
							<label>Изображение можно загзуить после сохрания записи</label>
						</div>
					}
					<div class="form-group mb-4">
						<label>Содержимое</label>
						<ValidationMessage For="@(() => AdditionalBlock.Description)" />
						<InputTextArea class="form-control" @bind-Value="AdditionalBlock.Description" />
					</div>
						<div class="form-group">
							<label>Тип поля</label>
							<InputSelect class="form-select" @bind-Value="AdditionalBlock.AdditionalBlockType">
								<option value="">Выберите тип поля для вывода</option>
								@foreach (var type in Enum.GetValues<AdditionalBlockType>())
								{
									<option value="@type">@type.GetDisplayName()</option>
								}
							</InputSelect>
						</div>
						<div class="form-group mb-4">
							<label>Опубликовано</label>
							<InputCheckbox class="" @bind-Value="AdditionalBlock.IsAvailable" />
						</div>
						<div class="mt-2">
							<button form="createAdditionalBlock" type="submit" class="btn btn-warning">Сохранить</button>
						</div>
				</div>
			</div>
		</EditForm>
	</TabPage>
</TabControl>

@code {

	private ICollectionLight Repository => Service;

	[Inject]
	public NavigationManager? NavManager { get; set; }

	[Parameter]
	public int Id { get; set; }
	private CollectionLight CollectionPage { get; set; } = new ();
	private bool TabIsActive { get; set; }
	private MetaData MetaData { get; set; } = new();
	private IList<string> OtherUrls { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await UpdateDataAsync();
	}

	protected override async Task OnParametersSetAsync()
	{
		if (Id != 0)
		{
			CollectionPage = await Repository.CollectionLight.FirstOrDefaultAsync(с => с.Id == Id) ?? new CollectionLight();
		}
		StateHasChanged();
	}

	private const string UrlPath = "imegs/img-collections/";
	private async Task SaveCollectionPage()
	{
		var isCheckName = await CheckNameAsync(CollectionPage.Name, Id);
		if (isCheckName)
		{
			PopupNotification.CreateNotification("Ошибка", "Коллекция с таким названием уже существует. Измените название:", CollectionPage.Name);
			return;
		}
		
		CollectionPage.MetaData = MetaData;
		if (string.IsNullOrEmpty(CollectionPage.MetaData.Url) || MetaManager.CheckUrl(CollectionPage.MetaData.Url, OtherUrls))
		{
			CollectionPage.MetaData.Url = MetaManager.UrlBuilder(CollectionPage.Name, OtherUrls);
		}
		
		if (Id == 0)
		{
			await Repository.CreateCollectionAsync(CollectionPage);
			await FolderManager.CeateDirectoryAsync(UrlPath, CollectionPage.Id);
			if (CollectionPage.Id != 0)
			{
				TabIsActive = true;
				NavManager?.NavigateTo(GetEditUrl(CollectionPage.Id));
				PopupNotification.CreateNotification("Старница сохранена", "Страница коллекции добавлена", CollectionPage.Name);
				StateHasChanged();
			}
		}
		else
		{
			await Repository.SaveCollectionAsync(CollectionPage);
			PopupNotification.CreateNotification("Изменения сохранены", "Запись отредактирована: Страница коллекции под ID", Id.ToString());
			NavManager?.NavigateTo("/admin/collections");
		}
	}
	private string GetEditUrl(int id) => $"/admin/collections/edit/{id}";

	private string ThemeColor => Id == 0 ? "primary" : "warning";
	private string TitleText => Id == 0 ? "Создание" : "Редактирование";
}


@code {

	private async Task UpdateDataAsync()
	{
		if (Id != 0)
		{
			AdditionalBlocksForCollectionData = await Repository.AdditionalBlocksInCollection.Where(b => b.CollectionLightId == Id).ToListAsync();
			TabIsActive = true;
		}
		MetaData = await Repository.MetaData.FirstOrDefaultAsync(c => c.CollectionLightId == Id) ?? new MetaData();
		OtherUrls = await Repository.CollectionLight.Where(c => c.Id != Id).Select(m => m.MetaData.Url).ToListAsync();
		await InvokeAsync(StateHasChanged);
	}

	private IEnumerable<AdditionalBlocksForCollection> AdditionalBlocksForCollectionData { get; set; } = Enumerable.Empty<AdditionalBlocksForCollection>();
	private AdditionalBlocksForCollection AdditionalBlock { get; set; } = new();
	
	private async Task CreateAdditionalBlockAsync()
	{
		AdditionalBlock.CollectionLightId = Id;
		if (AdditionalBlock.Id == 0)
		{
			await Repository.CreateAdditionalBlocksForCollectionAsync(AdditionalBlock);
			PopupNotification.CreateNotification("Блок сохранен", "Новый блок добавлен", AdditionalBlock.Caption);
		}
		else
		{
			await Repository.SaveAdditionalBlocksForCollectionAsync(AdditionalBlock);
			PopupNotification.CreateNotification("Изменения сохранены", "Дополнительное поле изменено", AdditionalBlock.Id.ToString());
			confirmation?.Hide();
		}
		AdditionalBlock = new AdditionalBlocksForCollection();
		await UpdateDataAsync();
	}

	private void DeleteAdditionalBlock(AdditionalBlocksForCollection additionalBlock)
	{
		AdditionalBlockToBeDelete = additionalBlock;
		confirmationCheckOnDelete = true;
		confirmationTitle = "Удаление дополнительного блока";
		confirmation?.Show();
	}

	Confirmation? confirmation;
	private AdditionalBlocksForCollection? AdditionalBlockToBeDelete { get; set; }
	private async Task OnConfirm()
	{
		if (AdditionalBlockToBeDelete != null)
		{
			await Repository.DeleteAdditionalBlocksForCollectionAsync(AdditionalBlockToBeDelete);
			confirmation?.Hide();
			PopupNotification.CreateNotification("Удаление дополнительного блока", "Удален дополнительный блок", AdditionalBlockToBeDelete.Caption);
			AdditionalBlockToBeDelete = null;
			await UpdateDataAsync();
		}
	}

	private void OnCancel()
	{
		confirmation?.Hide();
		AdditionalBlock = new AdditionalBlocksForCollection();
		if (AdditionalBlockToBeDelete == null) return;
		if (confirmationCheckOnDelete)
		{
			PopupNotification.CreateNotification("Отмена удаления", "Отменено удаление дополнительного блока",
				AdditionalBlockToBeDelete.Caption);
			AdditionalBlockToBeDelete = null;
		}
		else
		{
			PopupNotification.CreateNotification("Отмена редактирования", "Отменено редактирование дополнительного блока",
				AdditionalBlockToBeDelete.Caption);
		}
	}

}

@code {
	private bool confirmationCheckOnDelete;
	private string confirmationTitle = string.Empty;
	private async Task ChangeAdditionalBlock(AdditionalBlocksForCollection additionalBlock)
	{
		confirmationCheckOnDelete = false;
		confirmationTitle = "Редактирование дополнительного блока";
		AdditionalBlock = await Repository.AdditionalBlocksInCollection.FirstOrDefaultAsync(b => b.Id == additionalBlock.Id) ?? new();
		confirmation?.Show();
	}
	
	private async Task<bool> CheckNameAsync(string name, int id)
	{
		var names = await Repository.CollectionLight
			.Where(c => c.Id != id)
			.Select(c => c.Name).ToListAsync();
		
		var result = names.Any(n => string.Equals(n, name, StringComparison.CurrentCultureIgnoreCase));

		return result;
	}
}